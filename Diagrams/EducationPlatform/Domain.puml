@startuml EducationPlatformDomain

EducationPlatform *-[#red]-> "+" User
EducationPlatform *-[#red]-> Topic
EducationPlatform *-[#red]-> Itinerary : predefined
EducationPlatform o-[#red]-> "*" Itinerary : custom
EducationPlatform *-[#red]-> Evaluator
EducationPlatform o-[#red]-> "*" ExerciseBattery.Exercise
EducationPlatform o-[#red]-> "*" ExerciseBattery.QuestionExercise
EducationPlatform o-[#red]-> "*" ExerciseBattery.Domain

abstract User{
}

User <|-- Teacher
User <|-- Student

class Teacher{
}

class Student{
}
Student o--> "*" ExerciseBattery.Application

class Evaluator{
}
Evaluator --> QuestionExercise

class Itinerary {
}
Itinerary o--> "+" Topic

class Definition {
    - correct : boolean
}
Definition *--> "*" Justification:[!justification.correct]

class Justification {
}

abstract Topic{
}
Topic <|-- CompositeTopic
Topic <|-- SimpleTopic
Topic *--> "*" Attachment

class Attachment{
}
Attachment *--> "+" Document

class SimpleTopic{
}
SimpleTopic o--> "+" Concept

class CompositeTopic{
}
CompositeTopic o--> "+" Topic

class Document{}

class Concept{
}
Concept *-down-> "+" Definition
Concept *-down-> "*" Relation : origin
Concept *-down-> "*" Attachment

class Relation {
}
Relation --> Concept : target
Relation *-down-> RelationType

enum RelationType {
    Use
    Association
    Composition
    Inheritance
    Aggregation
} 

package ExerciseBattery #yellow{

    abstract Exercise {
    }
    Exercise <|-- QuestionExercise
    Exercise <|-- DomainExercise

    class DomainExercise{

    }
    DomainExercise --> "+" Domain
    DomainExercise --> "+" SimpleTopic

    class Domain{
        versions : List<Domain>
    }
    Domain *-- "*" Domain
    Domain *-- "+" ExerciseBattery.Application
   
    class QuestionExercise{
        statement : String
    }
    QuestionExercise <|-- MultipleChoice
    QuestionExercise <|-- Cloze
    QuestionExercise <|-- Open
    QuestionExercise --> "+" Concept
    QuestionExercise *-left- "+" Answer

    class Cloze{
        blankCount: int
    }
    
    class MultipleChoice{
    }

    class Application{
        - correct : boolean
        - evaluated : booleanean
        - solution : String
    }
    Application *--> "*" Justification:[!application.correct]
}
@enduml