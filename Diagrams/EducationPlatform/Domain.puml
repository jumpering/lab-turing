@startuml EducationPlatformDomain

EducationPlatform *--> "+" User
EducationPlatform *--> Topic
EducationPlatform *--> Itinerary : predefined
EducationPlatform o--> "*" Itinerary : custom
EducationPlatform *--> Evaluator

abstract User{
}

User <|-- Teacher
User <|-- Student

class Teacher{
}

class Student{
}
Student *-[#red]-> "*" Application

class Evaluator{
}
Evaluator --> Question

class Itinerary {
}
Itinerary o--> "+" Topic

class Definition {
}

class Justification {
}

class Domain {
    - name : String
}
Domain *-- "+" Version

abstract Applicable{
}
Applicable <|-- Version
Applicable <|-- Question
Applicable *-->"+" Application
Applicable o-->"*" Application

class Version{
    - requirements : List<String>
}

abstract Exercise {
    - statement : String
}
Exercise <|-down- Domain
Exercise <|-down- Question

abstract Question{
}
Question <|-- MultipleChoice
Question <|-- Cloze
Question <|-- Open

class Cloze{
    blankCount: int
}
  
class MultipleChoice{
}

class Application{
    - evaluated : boolean
    - solution : String
}

interface Validatable{
    - correct : boolean
}
Validatable <|.. Application
Validatable <|.. Definition
Validatable *--> "*" Justification:[!validatable.correct]

abstract Topic{
    + getConcepts()
}
Topic <|-- CompositeTopic
Topic <|-- SimpleTopic
Topic *--> "*" Attachment

class Attachment{
}
Attachment *-[#red]-> "+" Document

class SimpleTopic{
}
SimpleTopic o--> "+" Concept

class CompositeTopic{
}
CompositeTopic o--> "+" Topic

class Document{}

class Concept{
}
Concept *-down-> "+" Definition : correct
Concept *-down-> "*" Definition : incorrect
Concept *-down-> "*" Relation : origin
Concept *-down[#red]-> "*" Attachment
Concept o-down[#red]-> "*" Exercise

class Relation {
}
Relation --> Concept : target
Relation *-down-> RelationType

enum RelationType {
    Use
    Association
    Composition
    Inheritance
    Aggregation
} 
@enduml