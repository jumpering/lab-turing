@startuml EducationPlatformDomain

EducationPlatform *--> "+" Teacher
EducationPlatform *--> "+" Student
EducationPlatform *--> Topic
EducationPlatform *--> Itinerary : predefined
EducationPlatform o--> "*" Itinerary : custom
EducationPlatform o--> Chat
EducationPlatform *--> "*" User




class Chat{
    + searchExercises()
    + ContrastApplication()
}
Chat ..> Topic
Chat ..> Application





class Itinerary {
    - custom : boolean
    - topics : List<Topic>
}
Itinerary o--> "+" Topic
'Itinerary <|-- Custom
'Itinerary <|-- Predefined





class Application {
    - correct : boolean
    - evaluated: boolean
}
Application --> "?" Justification:[!application.correct]





class Definition {
    - correct : boolean
}
Definition *--> "?" Justification:[!definition.correct]





class Justification {
    - correct : boolean
}





class Domain {
    - statement : StatementType
    - applications : List<Application>
    - requirements : List<String>
}
Domain o-->"+" Concept
Domain o-->"*" Application
Domain *--> StatementType





enum StatementType {
    ClozeTest
    Definition
    Relation
    Open
    MultipleChoice
    JustifyApplication
    ApplicationCode
}





abstract User{
    + askChat()
    + sendApplication()
    + EditItinerary()
}
User <|-- Teacher
User <|-- Student
User *--> Application
User ..> Chat




class Teacher{
    + EvaluateApplication()
}
Teacher ..> Application
Teacher ..> Topic: editor
Teacher ..> Itinerary: editor 
'Teacher ..> Chat




class Student{
}
Student ...> Itinerary : editor \n [itinerary.custom]
'Student ..> Chat
'note left of Student
    'Editor only
    'for custom 
    'itineraries
'end note





class Excercise {
    - version
}
Excercise *--> Domain





abstract Topic{
    - documents : List<Document>
    - exercises : List<Exercise>
    + getIndex()
}
Topic *--> "*" Document
Topic <|-- CompositeTopic
Topic <|-- SimpleTopic
Topic o--> "*" Excercise




class SimpleTopic{
    - concepts : List<Concept>
}
SimpleTopic o--> "+" Concept





class CompositeTopic{
    - topics : List<Topic> 
}
CompositeTopic o--> "+" Topic





Document o--> "+" Media




class Concept{
    - exercises : List<Exercise>
}
Concept *-down-> "+" Definition : correct
Concept *-down-> "*" Definition : incorrect
Concept *-down-> "*" Relation
Concept o-down-> "*" Document
Concept o-down-> "*" Excercise





class Relation {
    - type : RelationType
}
Relation --> Concept : target
Relation *-left-> RelationType
Relation --> Concept : origin





enum RelationType {
    Use
    Association
    Composition
    Inheritance
    Aggregation
} 





class Media {
}
Media <|-- Audio
Media <|-- Video
Media <|-- Image
Media <|-- Text





Video -left-> "?" Audio 
Text -right-> "?" Audio : transcription
@enduml